using Sorting.Pixels._32;

namespace UnitTests;

public class SpanTests
{
    [Theory]
    [InlineData(0, 1, 0, 1, 0, 0)]
    [InlineData(1, 0, 1, 0, 0, 0)]
    [InlineData(1, 1, 1, 0, 0, 0)]
    [InlineData(1, 1, 1.3, 0.7, 0, 0)]
    [InlineData(2, 2, 1, 0, 0, 0)]
    [InlineData(2, 2, 1.3, 0.7, 0, 0)]
    [InlineData(3, 3, 1, 0, 0, 0)]
    [InlineData(3, 3, 1.3, 0.7, 0, 0)]

    [InlineData(1920, 1080, 0.3, 0.7, 0, 0)]
    [InlineData(1080, 1920, 0.3, 0.7, 0, 0)]
    [InlineData(1920, 1080, 0.3, 0.7, 100, 0)]
    [InlineData(1080, 1920, 0.3, 0.7, 100, 0)]
    [InlineData(1920, 1080, 0.3, 0.7, 0, 100)]
    [InlineData(1080, 1920, 0.3, 0.7, 0, 100)]
    [InlineData(1920, 1080, 0.3, 0.7, 100, 100)]
    [InlineData(1080, 1920, 0.3, 0.7, 100, 100)]
    [InlineData(1920, 1080, 1, 0, 0, 0)]
    [InlineData(1080, 1920, 1, 0, 0, 0)]
    [InlineData(1920, 1080, 0.3, 0.7, 0, 0)]
    [InlineData(1080, 1920, 0.3, 0.7, 0, 0)]
    [InlineData(1920, 1080, 0.3, 0.7, 100, 0)]
    [InlineData(1080, 1920, 0.3, 0.7, 100, 0)]
    [InlineData(1920, 1080, 0.3, 0.7, 0, 100)]
    [InlineData(1080, 1920, 0.3, 0.7, 0, 100)]
    [InlineData(1920, 1080, 0.3, 0.7, 100, 100)]
    [InlineData(1080, 1920, 0.3, 0.7, 100, 100)]
    [InlineData(1920, 1080, 1.3, 0.7, 0, 0)]
    [InlineData(1080, 1920, 1.3, 0.7, 0, 0)]
    [InlineData(1920, 1080, 1.3, 0.7, 100, 0)]
    [InlineData(1080, 1920, 1.3, 0.7, 100, 0)]
    [InlineData(1920, 1080, 1.3, 0.7, 0, 100)]
    [InlineData(1080, 1920, 1.3, 0.7, 0, 100)]
    [InlineData(1920, 1080, 1.3, 0.7, 100, 100)]
    [InlineData(1080, 1920, 1.3, 0.7, 100, 100)]
    [InlineData(1920, 1080, -1, 0, 0, 0)]
    [InlineData(1080, 1920, -1, 0, 0, 0)]
    [InlineData(1920, 1080, -1.3, 0.7, 0, 0)]
    [InlineData(1080, 1920, -1.3, 0.7, 0, 0)]
    [InlineData(1920, 1080, -1.3, 0.7, 100, 0)]
    [InlineData(1080, 1920, -1.3, 0.7, 100, 0)]
    [InlineData(1920, 1080, -1.3, 0.7, 0, 100)]
    [InlineData(1080, 1920, -1.3, 0.7, 0, 100)]
    [InlineData(1920, 1080, -1.3, 0.7, 100, 100)]
    [InlineData(1080, 1920, -1.3, 0.7, 100, 100)]
    [InlineData(1920, 1080, 1.3, -0.7, 0, 0)]
    [InlineData(1080, 1920, 1.3, -0.7, 0, 0)]
    [InlineData(1920, 1080, 1.3, -0.7, 100, 0)]
    [InlineData(1080, 1920, 1.3, -0.7, 100, 0)]
    [InlineData(1920, 1080, 1.3, -0.7, 0, 100)]
    [InlineData(1080, 1920, 1.3, -0.7, 0, 100)]
    [InlineData(1920, 1080, 1.3, -0.7, 100, 100)]
    [InlineData(1080, 1920, 1.3, -0.7, 100, 100)]
    [InlineData(1920, 1080, -1.3, -0.7, 0, 0)]
    [InlineData(1080, 1920, -1.3, -0.7, 0, 0)]
    [InlineData(1920, 1080, -1.3, -0.7, 100, 0)]
    [InlineData(1080, 1920, -1.3, -0.7, 100, 0)]
    [InlineData(1920, 1080, -1.3, -0.7, 0, 100)]
    [InlineData(1080, 1920, -1.3, -0.7, 0, 100)]
    [InlineData(1920, 1080, -1.3, -0.7, 100, 100)]
    [InlineData(1080, 1920, -1.3, -0.7, 100, 100)]

    [InlineData(3840, 2160, 0.3, 0.7, 0, 0)]
    [InlineData(2160, 3840, 0.3, 0.7, 0, 0)]
    [InlineData(3840, 2160, 0.3, 0.7, 100, 0)]
    [InlineData(2160, 3840, 0.3, 0.7, 100, 0)]
    [InlineData(3840, 2160, 0.3, 0.7, 0, 100)]
    [InlineData(2160, 3840, 0.3, 0.7, 0, 100)]
    [InlineData(3840, 2160, 0.3, 0.7, 100, 100)]
    [InlineData(2160, 3840, 0.3, 0.7, 100, 100)]
    [InlineData(3840, 2160, 1, 0, 0, 0)]
    [InlineData(2160, 3840, 1, 0, 0, 0)]
    [InlineData(3840, 2160, 1.3, 0.7, 0, 0)]
    [InlineData(2160, 3840, 1.3, 0.7, 0, 0)]
    [InlineData(3840, 2160, 1.3, 0.7, 100, 0)]
    [InlineData(2160, 3840, 1.3, 0.7, 100, 0)]
    [InlineData(3840, 2160, 1.3, 0.7, 0, 100)]
    [InlineData(2160, 3840, 1.3, 0.7, 0, 100)]
    [InlineData(3840, 2160, 1.3, 0.7, 100, 100)]
    [InlineData(2160, 3840, 1.3, 0.7, 100, 100)]
    [InlineData(3840, 2160, -1, 0, 0, 0)]
    [InlineData(2160, 3840, -1, 0, 0, 0)]
    [InlineData(3840, 2160, -1.3, 0.7, 0, 0)]
    [InlineData(2160, 3840, -1.3, 0.7, 0, 0)]
    [InlineData(3840, 2160, -1.3, 0.7, 100, 0)]
    [InlineData(2160, 3840, -1.3, 0.7, 100, 0)]
    [InlineData(3840, 2160, -1.3, 0.7, 0, 100)]
    [InlineData(2160, 3840, -1.3, 0.7, 0, 100)]
    [InlineData(3840, 2160, -1.3, 0.7, 100, 100)]
    [InlineData(2160, 3840, -1.3, 0.7, 100, 100)]
    [InlineData(3840, 2160, 1.3, -0.7, 0, 0)]
    [InlineData(2160, 3840, 1.3, -0.7, 0, 0)]
    [InlineData(3840, 2160, 1.3, -0.7, 100, 0)]
    [InlineData(2160, 3840, 1.3, -0.7, 100, 0)]
    [InlineData(3840, 2160, 1.3, -0.7, 0, 100)]
    [InlineData(2160, 3840, 1.3, -0.7, 0, 100)]
    [InlineData(3840, 2160, 1.3, -0.7, 100, 100)]
    [InlineData(2160, 3840, 1.3, -0.7, 100, 100)]
    [InlineData(3840, 2160, -1.3, -0.7, 0, 0)]
    [InlineData(2160, 3840, -1.3, -0.7, 0, 0)]
    [InlineData(3840, 2160, -1.3, -0.7, 100, 0)]
    [InlineData(2160, 3840, -1.3, -0.7, 100, 0)]
    [InlineData(3840, 2160, -1.3, -0.7, 0, 100)]
    [InlineData(2160, 3840, -1.3, -0.7, 0, 100)]
    [InlineData(3840, 2160, -1.3, -0.7, 100, 100)]
    [InlineData(2160, 3840, -1.3, -0.7, 100, 100)]

    public void PixelSpan2D_FastEstimateItemCount(
        int maxU, int maxV, double stepU, double stepV, int offU, int offV)
    {
        var data = new Pixel32bitUnion[Math.Max(maxU * maxV, 1)];
        var indices = new nint[maxU + maxV + 1];
        var span = new Sorter<Pixel32bitUnion>.PixelSpan2D(
            data, indices, maxU, maxV, stepU, stepV, offU, offV);

        Assert.Equal(span.SlowEstimateItemCount(), span.FastEstimateItemCount());
    }
}